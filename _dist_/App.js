/* src/App.svelte generated by Svelte v3.29.7 */
import {
	SvelteComponent,
	append,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	mount_component,
	safe_not_equal,
	set_data,
	space,
	text as text_1,
	toggle_class,
	transition_in,
	transition_out
} from "../web_modules/svelte/internal.js";

import Img from "./Img.js";

function create_fragment(ctx) {
	let main;
	let img;
	let t0;
	let div0;
	let t4;
	let div1;
	let t5;
	let current;

	img = new Img({
			props: {
				backgroundColor: "#e0e0e0",
				ratio: "800x437",
				src: "https://upload.wikimedia.org/wikipedia/commons/a/a8/Nighthawks_by_Edward_Hopper_1942.jpg",
				alt: "Nighthawks, 1942 painting by Edward Hopper"
			}
		});

	img.$on("load", /*load_handler*/ ctx[3]);

	return {
		c() {
			main = element("main");
			create_component(img.$$.fragment);
			t0 = space();
			div0 = element("div");

			div0.innerHTML = `<a href="https://commons.wikimedia.org/wiki/File:Nighthawks_by_Edward_Hopper_1942.jpg" target="_blank" rel="noopener">Nighthawks, 1942 painting by Edward Hopper</a> 
    <span>(6,000 Ã— 3,274 pixels, file size: 8.13 MB)</span>`;

			t4 = space();
			div1 = element("div");
			t5 = text_1(/*text*/ ctx[1]);
			toggle_class(div1, "success", /*success*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, main, anchor);
			mount_component(img, main, null);
			append(main, t0);
			append(main, div0);
			append(main, t4);
			append(main, div1);
			append(div1, t5);
			current = true;
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*text*/ 2) set_data(t5, /*text*/ ctx[1]);

			if (dirty & /*success*/ 4) {
				toggle_class(div1, "success", /*success*/ ctx[2]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(img.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(img.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(main);
			destroy_component(img);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let timing = -1;

	const load_handler = ({ detail }) => {
		$$invalidate(0, timing = detail.timing);
	};

	let text;
	let success;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*timing*/ 1) {
			$: $$invalidate(1, text = timing > 0
			? `Loaded in ${(timing / 1000).toFixed(2)}s`
			: "Loading...");
		}

		if ($$self.$$.dirty & /*timing*/ 1) {
			$: $$invalidate(2, success = timing > 0);
		}
	};

	return [timing, text, success, load_handler];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default App;